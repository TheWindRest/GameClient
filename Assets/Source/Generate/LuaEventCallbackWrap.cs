//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaEventCallbackWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaEventCallback), typeof(System.Object));
		L.RegFunction("Call", Call);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("New", _CreateLuaEventCallback);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ClassRef", get_ClassRef, null);
		L.RegVar("FuncRef", get_FuncRef, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLuaEventCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LuaEventCallback obj = new LuaEventCallback();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LuaEventCallback.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Call(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<object[]>(L, 2))
			{
				LuaEventCallback obj = (LuaEventCallback)ToLua.CheckObject<LuaEventCallback>(L, 1);
				object[] arg0 = ToLua.ToObjectArray(L, 2);
				obj.Call(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				LuaEventCallback obj = (LuaEventCallback)ToLua.CheckObject<LuaEventCallback>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				obj.Call(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaEventCallback.Call");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaEventCallback obj = (LuaEventCallback)ToLua.CheckObject<LuaEventCallback>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ClassRef(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaEventCallback obj = (LuaEventCallback)o;
			object ret = obj.ClassRef;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ClassRef on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FuncRef(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaEventCallback obj = (LuaEventCallback)o;
			LuaInterface.LuaFunction ret = obj.FuncRef;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FuncRef on a nil value");
		}
	}
}

