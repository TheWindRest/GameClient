//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ResourceManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ResourceManager), typeof(UnitySingleton<ResourceManager>));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("LoadPrefab", LoadPrefab);
		L.RegFunction("LoadTextAsset", LoadTextAsset);
		L.RegFunction("LoadSprite", LoadSprite);
		L.RegFunction("LoadScene", LoadScene);
		L.RegFunction("LoadPrefabAsync", LoadPrefabAsync);
		L.RegFunction("LoadTextAsync", LoadTextAsync);
		L.RegFunction("LoadAssetSync", LoadAssetSync);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResourceManager obj = (ResourceManager)ToLua.CheckObject<ResourceManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
			obj.Initialize(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadPrefab(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResourceManager obj = (ResourceManager)ToLua.CheckObject<ResourceManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			UnityEngine.GameObject o = obj.LoadPrefab(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadTextAsset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResourceManager obj = (ResourceManager)ToLua.CheckObject<ResourceManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			UnityEngine.TextAsset o = obj.LoadTextAsset(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResourceManager obj = (ResourceManager)ToLua.CheckObject<ResourceManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			UnityEngine.Sprite o = obj.LoadSprite(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ResourceManager obj = (ResourceManager)ToLua.CheckObject<ResourceManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.LoadScene(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadPrefabAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				ResourceManager obj = (ResourceManager)ToLua.CheckObject<ResourceManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.LoadPrefabAsync(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				ResourceManager obj = (ResourceManager)ToLua.CheckObject<ResourceManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				System.Action<UnityEngine.GameObject> arg2 = (System.Action<UnityEngine.GameObject>)ToLua.CheckDelegate<System.Action<UnityEngine.GameObject>>(L, 4);
				obj.LoadPrefabAsync(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				ResourceManager obj = (ResourceManager)ToLua.CheckObject<ResourceManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				System.Action<UnityEngine.GameObject> arg2 = (System.Action<UnityEngine.GameObject>)ToLua.CheckDelegate<System.Action<UnityEngine.GameObject>>(L, 4);
				LuaFunction arg3 = ToLua.CheckLuaFunction(L, 5);
				obj.LoadPrefabAsync(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceManager.LoadPrefabAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadTextAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				ResourceManager obj = (ResourceManager)ToLua.CheckObject<ResourceManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.LoadTextAsync(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				ResourceManager obj = (ResourceManager)ToLua.CheckObject<ResourceManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				System.Action<UnityEngine.TextAsset> arg2 = (System.Action<UnityEngine.TextAsset>)ToLua.CheckDelegate<System.Action<UnityEngine.TextAsset>>(L, 4);
				obj.LoadTextAsync(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				ResourceManager obj = (ResourceManager)ToLua.CheckObject<ResourceManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				System.Action<UnityEngine.TextAsset> arg2 = (System.Action<UnityEngine.TextAsset>)ToLua.CheckDelegate<System.Action<UnityEngine.TextAsset>>(L, 4);
				LuaFunction arg3 = ToLua.CheckLuaFunction(L, 5);
				obj.LoadTextAsync(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceManager.LoadTextAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAssetSync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResourceManager obj = (ResourceManager)ToLua.CheckObject<ResourceManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			UnityEngine.Object o = obj.LoadAssetSync(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

