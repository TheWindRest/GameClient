//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NetworkManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NetworkManager), typeof(Singleton<NetworkManager>));
		L.RegFunction("Init", Init);
		L.RegFunction("Connect", Connect);
		L.RegFunction("Close", Close);
		L.RegFunction("Update", Update);
		L.RegFunction("OnConnected", OnConnected);
		L.RegFunction("DealWithMsg", DealWithMsg);
		L.RegFunction("OnDataReceived", OnDataReceived);
		L.RegFunction("SendMsg", SendMsg);
		L.RegFunction("OnConnectError", OnConnectError);
		L.RegFunction("OnClosed", OnClosed);
		L.RegFunction("New", _CreateNetworkManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("canReconnect", get_canReconnect, set_canReconnect);
		L.RegVar("m_RecvBuffer", get_m_RecvBuffer, set_m_RecvBuffer);
		L.RegVar("m_RecvPos", get_m_RecvPos, set_m_RecvPos);
		L.RegVar("mReceiveMsgIDs", get_mReceiveMsgIDs, set_mReceiveMsgIDs);
		L.RegVar("mReceiveStreams", get_mReceiveStreams, set_mReceiveStreams);
		L.RegVar("mReceiveStreamsPool", get_mReceiveStreamsPool, set_mReceiveStreamsPool);
		L.RegVar("HandleNetMsg", get_HandleNetMsg, set_HandleNetMsg);
		L.RegVar("HandleConnect", get_HandleConnect, set_HandleConnect);
		L.RegVar("HandleDisConnect", get_HandleDisConnect, set_HandleDisConnect);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNetworkManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				NetworkManager obj = new NetworkManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: NetworkManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			NetworkManager obj = (NetworkManager)ToLua.CheckObject<NetworkManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			ServerType arg2 = (ServerType)ToLua.CheckObject(L, 4, typeof(ServerType));
			obj.Init(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetworkManager obj = (NetworkManager)ToLua.CheckObject<NetworkManager>(L, 1);
			obj.Connect();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetworkManager obj = (NetworkManager)ToLua.CheckObject<NetworkManager>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetworkManager obj = (NetworkManager)ToLua.CheckObject<NetworkManager>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Update(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnConnected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetworkManager obj = (NetworkManager)ToLua.CheckObject<NetworkManager>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			System.EventArgs arg1 = (System.EventArgs)ToLua.CheckObject<System.EventArgs>(L, 3);
			obj.OnConnected(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DealWithMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetworkManager obj = (NetworkManager)ToLua.CheckObject<NetworkManager>(L, 1);
			obj.DealWithMsg();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDataReceived(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetworkManager obj = (NetworkManager)ToLua.CheckObject<NetworkManager>(L, 1);
			obj.OnDataReceived();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetworkManager obj = (NetworkManager)ToLua.CheckObject<NetworkManager>(L, 1);
			LuaByteBuffer arg0 = new LuaByteBuffer(ToLua.CheckByteBuffer(L, 2));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SendMsg(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnConnectError(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetworkManager obj = (NetworkManager)ToLua.CheckObject<NetworkManager>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			System.IO.ErrorEventArgs arg1 = (System.IO.ErrorEventArgs)ToLua.CheckObject<System.IO.ErrorEventArgs>(L, 3);
			obj.OnConnectError(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnClosed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetworkManager obj = (NetworkManager)ToLua.CheckObject<NetworkManager>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			System.EventArgs arg1 = (System.EventArgs)ToLua.CheckObject<System.EventArgs>(L, 3);
			obj.OnClosed(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canReconnect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			bool ret = obj.canReconnect;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index canReconnect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_RecvBuffer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			byte[] ret = obj.m_RecvBuffer;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_RecvBuffer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_RecvPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			int ret = obj.m_RecvPos;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_RecvPos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mReceiveMsgIDs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			System.Collections.Generic.List<int> ret = obj.mReceiveMsgIDs;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mReceiveMsgIDs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mReceiveStreams(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			System.Collections.Generic.List<System.IO.MemoryStream> ret = obj.mReceiveStreams;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mReceiveStreams on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mReceiveStreamsPool(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			System.Collections.Generic.List<System.IO.MemoryStream> ret = obj.mReceiveStreamsPool;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mReceiveStreamsPool on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HandleNetMsg(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			QKEvent ret = obj.HandleNetMsg;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HandleNetMsg on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HandleConnect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			QKEvent ret = obj.HandleConnect;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HandleConnect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HandleDisConnect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			QKEvent ret = obj.HandleDisConnect;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HandleDisConnect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_canReconnect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.canReconnect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index canReconnect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_RecvBuffer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.m_RecvBuffer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_RecvBuffer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_RecvPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.m_RecvPos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_RecvPos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mReceiveMsgIDs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			System.Collections.Generic.List<int> arg0 = (System.Collections.Generic.List<int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<int>));
			obj.mReceiveMsgIDs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mReceiveMsgIDs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mReceiveStreams(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			System.Collections.Generic.List<System.IO.MemoryStream> arg0 = (System.Collections.Generic.List<System.IO.MemoryStream>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<System.IO.MemoryStream>));
			obj.mReceiveStreams = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mReceiveStreams on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mReceiveStreamsPool(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			System.Collections.Generic.List<System.IO.MemoryStream> arg0 = (System.Collections.Generic.List<System.IO.MemoryStream>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<System.IO.MemoryStream>));
			obj.mReceiveStreamsPool = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mReceiveStreamsPool on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HandleNetMsg(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			QKEvent arg0 = (QKEvent)ToLua.CheckObject<QKEvent>(L, 2);
			obj.HandleNetMsg = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HandleNetMsg on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HandleConnect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			QKEvent arg0 = (QKEvent)ToLua.CheckObject<QKEvent>(L, 2);
			obj.HandleConnect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HandleConnect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HandleDisConnect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			QKEvent arg0 = (QKEvent)ToLua.CheckObject<QKEvent>(L, 2);
			obj.HandleDisConnect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HandleDisConnect on a nil value");
		}
	}
}

